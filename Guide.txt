Create:
1 - git clone module a
2 - git clone module b
3 - git submodule add module-b to module-a
4 - See git status \ git diff --cached --submodule


If you want to remove for testing: rm -rf module-a
Powershell: rm -r -fo .\module-a\

How to clone a project with submodule:
1 - run git clone the prject
2 - git submodule update --init --recursive
3 - simpler solution is to run the following command:
        git clone --recurse-submodules {repo's url}
        

Pulling Changes:
git submodule update --remote

Or:
Update a Specific Submodule to the Latest Remote Version:
Navigate to the submodule directory:


cd path/to/submodule
Update the submodule to the latest remote version:


git fetch origin                    # Fetch the latest changes
git checkout desired_branch_or_tag  # Switch to the desired branch or tag
git pull origin desired_branch_or_tag  # Pull the latest changes from the desired branch or tag

Update a Specific Submodule to a Specific Commit:
Navigate to the submodule directory:


cd path/to/submodule
Checkout the specific commit:


git fetch origin                    # Fetch the latest changes
git checkout <commit_hash>          # Checkout the specific commit by its hash

Updating Submodules in the Parent Repository:
Once you've updated the submodule to the desired version, you can update the parent repository to reflect this change:

Navigate back to the parent repository:


cd path/to/parent_repository
Update the submodule reference:



git add path/to/submodule      # Stage the submodule changes
git commit -m "Update submodule to specific version/commit"   # Commit the submodule changes
git push origin main           # Push the changes to the remote repository

Remember, when working with submodules and updating them to specific versions or commits, you should commit these changes in the parent repository to update the reference to the specific commit of the submodule. This ensures that others who clone your repository will get the correct submodule version.